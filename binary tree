import java.util.*;
class TreeNode
{
	int data;
	TreeNode left;
	TreeNode right;
	
	public void spiralTraversal(TreeNode root)
	{
		if(root == null)   /* Can use two queues. RemoveLast from first queue. RemoveFirst from second queue. (order - first level from right, second level from left) */
			return;
		Stack<TreeNode> st1 = new Stack<TreeNode>();
		Stack<TreeNode> st2 = new Stack<TreeNode>();
		st1.push(root);
		while(!st1.isEmpty() || !st2.isEmpty())
		{
			while(!st1.isEmpty())
			{
				TreeNode temp = st1.pop();
				System.out.print(temp);
				if(temp.right != null)
					st2.push(temp.right);
				if(temp.left != null)
					st2.push(temp.left);
			}
			System.out.println();
			while(!st2.isEmpty())
			{
				TreeNode temp2 = st2.pop();
				System.out.print(temp2);
				if(temp2.left != null)
					st1.push(temp2.left);
				if(temp2.right != null)
					st1.push(temp2.right);
			}
			System.out.println();
		}
	}
	public void spiralTraversalUsingBool(TreeNode root)
	{
		if(root == null)
			return;
		int height = height(root);
		boolean leftToRight = false;
		for(int i=1; i<=height; i++)
		{
			printGivenLevelUsingBool(root, i, leftToRight);
			System.out.println();
			leftToRight = !leftToRight;
		}
	}
	public void printGivenLevelUsingBool(TreeNode root, int level, boolean leftToRight)
	{
		if(root == null)
			return;
		if(level == 1)
		{
			System.out.print(root);
			return;
		}
		else
		{
			if(leftToRight)
			{
				printGivenLevelUsingBool(root.left, level-1, leftToRight);
				printGivenLevelUsingBool(root.right, level-1, leftToRight);
			}
			else
			{
				printGivenLevelUsingBool(root.right, level-1, leftToRight);
				printGivenLevelUsingBool(root.left, level-1, leftToRight);
			}
		}
	}
	/* For constructing a Binary Tree from a given LinkedList that contains level order traversal for that tree */
	TreeNode root_llToB = null;
	TreeNode next;  //For linkedlist
	public TreeNode linkedlistToBinary(TreeNode head)
	{
		if(head == null)
		   return root_llToB;
		root_llToB = new TreeNode(head.data);
		head = head.next;
		LinkedList<TreeNode> q = new LinkedList<TreeNode>();
		q.add(root_llToB);
		while(head != null)
		{
			TreeNode parent = q.removeFirst();
			TreeNode leftChild = null, rightChild = null;
			leftChild = new TreeNode(head.data);
			q.add(leftChild);
			head = head.next;
			if(head != null)
			{
				rightChild = new TreeNode(head.data);
				q.add(rightChild);
				head = head.next;
			}
			parent.left = leftChild;
			parent.right = rightChild;
		}
		return root_llToB;
	}
	
	/* For connecting nodes of the same level using an extra pointer in the TreeNode structure */
	TreeNode nextRight = null;
	public TreeNode connectLevelNodesIterative2(TreeNode root)
	{
		if(root == null)
			return null;
		LinkedList<TreeNode> q = new LinkedList<TreeNode>();
		int level = 0, levelNodeCount = 0;
		q.add(root);
		while(!q.isEmpty())
		{
			levelNodeCount = q.size();
			if(levelNodeCount == 0)
				break;
			level++;    // not used
			while(levelNodeCount > 0)
			{
				TreeNode head = q.removeFirst();
				levelNodeCount--;
				if(levelNodeCount - 1 >= 0)
				{
					TreeNode temp = q.peek();
					head.nextRight = temp;
				}
				if(head.left != null)
					q.add(head.left);
				if(head.right != null)
					q.add(head.right);
			}
		}
		return root;
	}
	public TreeNode connectLevelNodesIterative(TreeNode root)    /* Constant Space */
	{
		if(root == null)
			return null;
		root.nextRight = null;
		TreeNode rootCopy = root;  //use a root copy because you dont want to move root all the way down. You need to return the root. */
		while(rootCopy != null)
		{
			TreeNode temp = rootCopy;
			while(temp != null)
			{
				if(temp.left != null)
				{
					if(temp.right != null)
						temp.left.nextRight = temp.right;
					else
						temp.left.nextRight = getNextRight(temp);			
				}
				if(temp.right != null)
					temp.right.nextRight = getNextRight(temp);
			    temp = temp.nextRight;
			}
			if(rootCopy.left != null)
				rootCopy = rootCopy.left;
			else if(rootCopy.right != null)
				rootCopy = rootCopy.right;
			else
				rootCopy = getNextRight(rootCopy);
		}
		return root;
	}
	public TreeNode connectLevelNodesRecursive2(TreeNode root)
	{
		if(root == null)
			return null;
		connectLevelNodesRecursive2Util(root);
		return root;
	}
	public void connectLevelNodesRecursive2Util(TreeNode root)
	{
		if(root == null)
			return;
		if(root.left != null)
			root.left.nextRight = root.right;
		if(root.right != null)
			root.right.nextRight = (root.nextRight != null)? root.nextRight.left : null;
		connectLevelNodesRecursive2Util(root.left);
		connectLevelNodesRecursive2Util(root.right);
	}
	public TreeNode connectLevelNodes(TreeNode root)
	{
		if(root == null)
			return null;
		root.nextRight = null;
		connectLevelNodesUtil(root);
		return root;
	}
	public void connectLevelNodesUtil(TreeNode root)
	{
		if(root == null)
			return;
		if(root.nextRight != null)
			connectLevelNodesUtil(root.nextRight);
		if(root.left != null)
		{
			if(root.right != null)
			{
				root.left.nextRight = root.right;
				root.right.nextRight = getNextRight(root);
			}
			else
				root.left.nextRight = getNextRight(root);
			connectLevelNodesUtil(root.left);
		}
		else if(root.right != null)
		{
			root.right.nextRight = getNextRight(root);
			connectLevelNodesUtil(root.right);
		}
		else
			connectLevelNodesUtil(getNextRight(root));
	}
	public TreeNode getNextRight(TreeNode node)
	{
		TreeNode temp = node.nextRight;
		while(temp != null)
		{
			if(temp.left != null)
				return temp.left;
			if(temp.right != null)
				return temp.right;
			temp = temp.nextRight;
		}
		return null;
	}
	/*For constructing binary tree from only preorder and another array that tells whether each node is a leaf or non-leaf. This is a special binary tree where each node has 0 or 2 children. */
	int preorderIndex_preB = 0;
	public TreeNode preorderToBinary(int[] preorder, char[] preorderLN)
	{
		int size = preorder.length;
		return preorderToBinaryUtil(preorder, preorderLN, size);
	}
	public TreeNode preorderToBinaryUtil(int[] preorder, char[] preorderLN, int size)
	{
		if(preorderIndex_preB >= size)
			return null;
		TreeNode root = new TreeNode(preorder[preorderIndex_preB]);
		int index = preorderIndex_preB;
		preorderIndex_preB++;
		if(preorderLN[index] == 'N')
		{
			root.left = preorderToBinaryUtil(preorder, preorderLN, size);
			root.right = preorderToBinaryUtil(preorder, preorderLN, size);
		}
		return root;
	}
	public void reverseLevelOrderTraversalIterative(TreeNode root)
	{
		if(root == null)
			return;
		LinkedList<TreeNode> q = new LinkedList<TreeNode>();
		Stack<TreeNode> st = new Stack<TreeNode>();
		q.add(root);
		while(!q.isEmpty())
		{
			TreeNode temp = q.removeFirst();
			st.push(temp);
			if(temp.right != null)     /* If you enqueue left before right, it will print from the bottom up from right side instead of left side */
				q.add(temp.right);
			if(temp.left != null)
				q.add(temp.left);
		}
		while(!st.isEmpty())
			System.out.println(st.pop());
	}
	public void reverseLevelOrderTraversal(TreeNode root)
	{
		if(root == null)
			return;
		int height = height(root);
		for(int i=height; i>=1; i--)
		   printGivenLevel(root, i);
	}
	public void printGivenLevel(TreeNode root, int level)
	{
		if(root == null)
			return;
		if(level == 1)
		{
			System.out.println(root.data);
			return;
		}
		printGivenLevel(root.left, level-1);
		printGivenLevel(root.right, level-1);
	}
	
	/* For populating inorder successor for all nodes. Each node has an extra pointer in its structure */
	TreeNode nextInorder = null;  //Each node has this
	TreeNode prev = null;
	public void populateInorderSuccessor(TreeNode root)
	{
		if(root == null)
			return;
		populateInorderSuccessor(root.right);
		root.nextInorder = prev;
		prev = root;
		populateInorderSuccessor(root.left);
	}
	public void boundaryTraversal(TreeNode root)
	{
		if(root == null)
			return;
		printLeftBoundary(root);
		printLeaves(root);
		printRightBoundary(root);
	}
	public void printLeftBoundary(TreeNode root)
	{
		if(root == null)
			return;
		if(root.left != null)
		{
			System.out.println("printed by left "+root.data);
			printLeftBoundary(root.left);
		}
		else if(root.right != null)
		{
			System.out.println("printed by left "+root.data);
			printLeftBoundary(root.right);
		}
	}
	public void printRightBoundary(TreeNode root)
	{
		if(root == null)
			return;
		if(root.right != null)
		{
			printRightBoundary(root.right);
			System.out.println("printed by right "+root);
		}
		else if(root.left != null)
		{
			printRightBoundary(root.left);
			System.out.println("printed by right "+root);
		}
	}
	public void printLeaves(TreeNode root) /* How to print only selected leaves? So don't print any leaf during left or right boundary traversal. Leave it to this method to print all leaves. */
	{
		if(root == null)
			return;
		printLeaves(root.left);
		if(root.left == null && root.right == null)
			System.out.println("printed by leaves "+root);
		printLeaves(root.right);
	}
	
	/* For printing post order from inorder and preorder traversals */
	int preIndex_PIPre = 0;
	public void printPostorderFromInorderPreorder(int[] inorder, int[] preorder)
	{
		int size = inorder.length;
		int left = 0, right = size-1;
		printPostorderFromInorderPreorderUtil(inorder, preorder, left, right, size);
	}
	public void printPostorderFromInorderPreorderUtil(int[] inorder, int[] preorder, int left, int right, int size)
	{
		if(left > right)
			return;
		int root = preorder[preIndex_PIPre];
		if(preIndex_PIPre+1 <= size)
			preIndex_PIPre++;
		if(left == right)
			System.out.println(root);
		else
		{
		int index = search(inorder, root, left, right);
		printPostorderFromInorderPreorderUtil(inorder, preorder, left, index-1, size);		
                printPostorderFromInorderPreorderUtil(inorder, preorder, index+1, right, size);
                System.out.println(root);
		}
	}
	
	/* For constructing binary tree from preorder and postorder traversals. Possible only if it is a full binary tree - 0 or 2 children (no left alignment condition?) */
	int preIndex = 0;
	public TreeNode preorderPostorderToBinary(int[] preorder, int[] postorder)
	{
		int size = postorder.length;
		int left = 0, right = size - 1;
		return preorderPostorderToBinaryUtil(preorder, postorder, left, right, size);
	}
	public TreeNode preorderPostorderToBinaryUtil(int[] preorder, int[] postorder, int left, int right, int size)
	{
		if(preIndex >= size || left > right)
			return null;
		TreeNode root = new TreeNode(preorder[preIndex++]);
		if(left == right)
			return root;
		int index = search(postorder, preorder[preIndex], left, right);
		if(index != -1 && index <= right)
		{
			root.left = preorderPostorderToBinaryUtil(preorder, postorder, left, index, size);
			root.right = preorderPostorderToBinaryUtil(preorder, postorder, index+1, right, size);
		}
		return root;
	}
	
	/* For finding diff between odd and even level sums iteratively */
	int sum = 0;	
	public int diffOddEvenLevelSumIterative(TreeNode root)
	{
		if(root == null)
			return 0;
		LinkedList<TreeNode> q = new LinkedList<TreeNode>();
		q.add(root);
		int level = 0, levelNodeCount = 0;
		int oddSum = 0, evenSum = 0, diff = 0;
		while(true)
		{
			levelNodeCount = q.size();
			if(levelNodeCount == 0)
				break;
			level++;
			while(levelNodeCount > 0)
			{
				TreeNode temp = q.removeFirst();
				if((level & 0x1) == 1)
					oddSum += temp.data;
				else
					evenSum += temp.data;
				if(temp.left != null)
					q.add(temp.left);
				if(temp.right != null)
					q.add(temp.right);
				levelNodeCount--;
			}
		}
		return oddSum-evenSum;
	}
	public int diffOddEvenLevelSum(TreeNode root)
	{
		if(root == null)
			return 0;
		return root.data - diffOddEvenLevelSum(root.left) - diffOddEvenLevelSum(root.right);
	}
	public TreeNode removeNodeWithSumLessThanK(TreeNode root, int k)
	{
		if(root == null)                           //test this method for other trees
			return null;
		sum += root.data;                     
		root.left = removeNodeWithSumLessThanK(root.left, k);
		root.right = removeNodeWithSumLessThanK(root.right, k);
		if(sum < k)
			root = null;
		return root;
	}
	public int heightIterative(TreeNode root)
	{
		if(root == null)
			return 0;
		LinkedList<TreeNode> q = new LinkedList<TreeNode>();
		int height = 0;
		q.add(root);
		while(true)
		{
			int levelNodeCount = q.size();
			if(levelNodeCount == 0)
				return height;
			height++;
			while(levelNodeCount > 0)
			{
				TreeNode temp = q.removeFirst();
				if(temp.left != null)
					q.add(temp.left);
				if(temp.right != null)
					q.add(temp.right);
				levelNodeCount--;
			}
		}
	}
	public void postorderIterativeTwoStacks(TreeNode root)
	{
		if(root == null)
			return;
		Stack<TreeNode> st1 = new Stack<TreeNode>();
		Stack<TreeNode> st2 = new Stack<TreeNode>();
		st1.push(root);
		while(!st1.isEmpty())
		{
			TreeNode temp = st1.pop();
			st2.push(temp);
			if(temp.left != null)
				st1.push(temp.left);
			if(temp.right != null)
				st1.push(temp.right);
		}
		while(!st2.isEmpty())
			System.out.println(st2.pop());
	}
	public void printAncestorsIterative(TreeNode root, int target)
	{
		if(root == null)
			return;
		Stack<TreeNode> st = new Stack<TreeNode>();
		while(true)
		{
			while(root != null && root.data != target)
			{
				st.push(root);
				root = root.left;
			}
			if(root != null && root.data == target)
				break;
			if(st.peek().right == null)
			{
				root = st.pop();
				while(!st.isEmpty() && st.peek().right == root)
					root = st.pop();
			}
			root = (st.isEmpty())? null: st.peek().right;
		}
		while(!st.isEmpty())
			System.out.println(st.pop());
	}
	public void postorderIterativeOneStack(TreeNode root)
	{
		if(root == null)
			return;
		Stack<TreeNode> st = new Stack<TreeNode>();	
		do
		{
			while(root != null)
			{
				if(root.right != null)
					st.push(root.right);
				st.push(root);
				root = root.left;
			}
			root = st.pop();
			if(root.right != null && !st.isEmpty() && st.peek() == root.right)
			{
				st.pop();
				st.push(root);
				root = root.right;
			}
			else
			{
				System.out.println(root.data);
				root = null;
			}
		}while(!st.isEmpty());
	}
	public void preorderMorris(TreeNode root)
	{
		if(root == null)
			return;
		TreeNode current = root;
		while(current != null)
		{
			if(current.left == null)
			{
				System.out.println(current.data);
				current = current.right;
			}
			else
			{
				TreeNode prev = current.left;
				while(prev.right != null && prev.right != current)
					prev = prev.right;
				if(prev.right == null)
				{
					prev.right = current;
					System.out.println(current.data);
					current = current.left;
				}
				else
				{
					prev.right = null;
					current = current.right;
				}
			}
		}
	}
	public void inorderMorris(TreeNode root)
	{
		if(root == null)
			return;
		TreeNode current = root;
		while(current != null)
		{
			if(current.left == null)
			{
				System.out.println(current.data);
				current = current.right;
			}
			else
			{
				TreeNode prev = current.left;
				while(prev.right !=null && prev.right != current)
				   prev = prev.right;
				if(prev.right == null)
				{
					prev.right = current;
					current = current.left;
				}
				else
				{
					prev.right = null;
					System.out.println(current.data);
					current = current.right;
				}			
			}
		}
	}
	
	/* For printing left view of a binary tree */
	int maxLevel = 0;
	public void printLeftView(TreeNode root)
	{
		int level = 1;
		printLeftViewUtil(root, level);
	}
	public void printLeftViewUtil(TreeNode root, int level)
	{
		if(root == null)
			return;                    /* For right view do right subtree first */
		if(level > maxLevel)
		{
			System.out.println(root.data);
			maxLevel = level;
		}
		printLeftViewUtil(root.left, level+1);         
		printLeftViewUtil(root.right, level+1);	
	}
	public void inorderIterative(TreeNode root)
	{
		if(root == null)
			return;
		Stack<TreeNode> st = new Stack<TreeNode>();
		boolean done = false;
		TreeNode current = root;
		while(!done)
		{
			if(current != null)
			{
				st.push(current);
				current = current.left;
			}
			else
			{
				if(!st.isEmpty())
				{
					TreeNode temp = st.pop();
					System.out.println(temp);
					current = temp.right;
				}
				else
					done = true;
			}
		}
	}
	public void preorderIterative(TreeNode root)
	{
		if(root == null)
			return;
		Stack<TreeNode> st = new Stack<TreeNode>();
		st.push(root);	
		while(!st.isEmpty())
		{
			TreeNode temp = st.pop();
			System.out.println(temp);
			if(temp.right != null)
				st.push(temp.right);
			if(temp.left != null)
				st.push(temp.left);
		}
	}
	public boolean isComplete(TreeNode root)          /* Time Complexity: O(n) */
	{
		if(root == null)
			return true;
		LinkedList<TreeNode> q = new LinkedList<TreeNode>();
		q.add(root);
		boolean flag = false;
		while(!q.isEmpty())
		{
			TreeNode temp = q.removeFirst();
			if(temp.left != null)
			{
				if(flag == true)
					return false;
				q.add(temp.left);
			}
			else
				flag = true;
			if(temp.right != null)
			{
				if(flag == true)
					return false;
				q.add(temp.right);
			}
			else
				flag = true;
		}
		return true;
	}
	public TreeNode getNextRightNode(TreeNode root, int target)    /* Time Complexity: O(n) */
	{
		if(root == null)
			return null;
		LinkedList<TreeNode> qNode = new LinkedList<TreeNode>();
		LinkedList<Integer> qLevel = new LinkedList<Integer>();
		int level = 0;
		qNode.add(root);
		qLevel.add(level);
		while(!qNode.isEmpty())
		{
			TreeNode node = qNode.removeFirst();
			int nodeLevel = qLevel.removeFirst();
			if(node.data == target)
			{
				if(qNode.isEmpty() || nodeLevel != qLevel.removeFirst())
					return null;
				return qNode.removeFirst();
			}
			if(node.left != null)
			{
				qNode.add(node.left);
				qLevel.add(level+1);
			}
			if(node.right != null)
			{
				qNode.add(node.right);
				qLevel.add(level+1);
			}
		}
		return null;
	}
	
	/* For extracting leaves from binary tree and forming doubly */
	TreeNode headLD = null;
	public void leavesToDoubly(TreeNode root)         /* Time Complexity: O(n) */
	{
		TreeNode newRoot = leavesToDoublyUtil(root);
		TreeNode temp = headLD;
		System.out.println("New root: "+newRoot);
		while(temp != null){
			System.out.println(temp);
			temp = temp.right;
		}
	}
	public TreeNode leavesToDoublyUtil(TreeNode root)
	{
		if(root == null)
			return null;
		if(root.left == null && root.right == null)
		{
			root.right = headLD;
			if(headLD != null)
				headLD.left = right;
			headLD = root;
			return null;
		}
		root.right = leavesToDoublyUtil(root.right);
		root.left = leavesToDoublyUtil(root.left);
		return root;
	}
	public boolean checkLeafLevel(TreeNode root)      /* Time Complexity: O(n) */
	{
		int level = 0, leafLevel = 0;
		return checkLeafLevelUtil(root, level, leafLevel);
	}
	public boolean checkLeafLevelUtil(TreeNode root, int level, int leafLevel)
	{
		if(root == null)
			return true;
		if(root.left == null && root.right == null)
		{
			if(leafLevel == 0)
			{
				leafLevel = level;
				return true;
			}
			return (level == leafLevel);
		}
		return checkLeafLevelUtil(root.left, level+1, leafLevel) && checkLeafLevelUtil(root.right, level+1, leafLevel);
	}
	
	/* For finding deepestLeftLeaf */
	TreeNode resultNode = null;           /* Time Complexity: O(n) */
	public void deepestLeftLeaf(TreeNode root)
	{
		boolean isLeft = false;
		int level = 0, maxLevel = 0;
		deepestLeftLeaf(root, isLeft, level, maxLevel);
		System.out.println(resultNode);
	}
	public void deepestLeftLeaf(TreeNode root, boolean isLeft, int level, int maxLevel)
	{
		if(root == null)
			return;
		if(isLeft && root.left == null && root.right == null && level > maxLevel)
		{
			maxLevel = level;
			resultNode = root;
			return;
		}
		deepestLeftLeaf(root.left, true, level+1, maxLevel);
		deepestLeftLeaf(root.right, false, level+1, maxLevel);
	}
	public void verticalSum(TreeNode root)       /* Time Complexity: O(n) */
	{
		if(root == null)
			return;
		HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
		verticalSumUtil(root, hm, 0);
		if(hm != null)
            System.out.println(hm.entrySet());	
	}
	public void verticalSumUtil(TreeNode root, HashMap<Integer, Integer> hm, int hd)
	{
		if(root == null)
			return;
		verticalSumUtil(root.left, hm, hd-1);
		int prevSum = (hm.get(hd) == null)? 0: hm.get(hd);
		hm.put(hd, prevSum+root.data);
		verticalSumUtil(root.right, hm, hd+1);
	}
	public boolean treeIsomorphism(TreeNode root1, TreeNode root2)  /* Time complexity: O(m+n) */
	{
		if(root1 == null && root2 == null)
			return true;
		if(root1 == null || root2 == null)
			return false;
		if(root1.data != root2.data)
			return false;
		return (treeIsomorphism(root1.left, root2.left) && treeIsomorphism(root1.right, root2.right)) ||
				(treeIsomorphism(root1.left, root2.right) && treeIsomorphism(root1.right, root2.left));
	}
	
	/* For finding distance between two given nodes in a binary tree */
	int dist1 = -1, dist2 = -1, dist;
	
	public int distanceBetweenNodes(TreeNode root, int n1, int n2)
	{
		TreeNode lca = distanceBetweenNodesUtil(root, n1, n2, 1);
		if(dist1 != -1 && dist2 != -1)
			return dist;
		if(dist1 != -1)
		{
			dist = findLevel(lca, n2, 0);
			return dist;
		}
		if(dist2 != -1)
		{
			dist = findLevel(lca, n1, 0);
			return dist;
		}
		return -1;
	}
	public TreeNode distanceBetweenNodesUtil(TreeNode root, int n1, int n2, int level)
	{
		if(root == null)
			return null;
		if(root.data == n1)
		{
			dist1 = level;
		    return root;
		}
		if(root.data == n2)
		{
			dist2 = level;
			return root;
		}
		TreeNode leftLca = distanceBetweenNodesUtil(root.left, n1, n2, level+1);
		TreeNode rightLca = distanceBetweenNodesUtil(root.right, n1, n2, level+1);
		if(leftLca != null && rightLca != null){
			dist = dist1 + dist2 - 2*level;
			return root;
		}
		return (leftLca != null)? leftLca: rightLca;
	}
	public int findLevel(TreeNode root, int key, int level)
	{
		if(root == null)
			return -1;
		if(root.data == key)
			return level;
		int ans = findLevel(root.left, key, level+1);
		return (ans != -1)? ans: findLevel(root.right, key, level+1);
	}
	public void printKDistantFromLeaf(TreeNode root, int k)
	{
		int len = root.height(root);
		int[] path = new int[len];
		int pathlen = 0;
		boolean[] visited = new boolean[len];
		printKDistantFromLeafUtil(root, k, path, pathlen, visited);
	}
	public void printKDistantFromLeafUtil(TreeNode root, int k, int[] path, int pathlen, boolean[] visited)
	{
		if(root == null)
			return;
		path[pathlen] = root.data;
		pathlen++;
		visited[pathlen] = false;
		if(root.left == null && root.right == null && (pathlen-k-1) >=0 && visited[pathlen-k-1] == false)
		{
			System.out.println(path[pathlen-k-1]);
			return;
		}
		printKDistantFromLeafUtil(root.left, k, path, pathlen, visited);
		printKDistantFromLeafUtil(root.right, k, path, pathlen, visited);
	}
	public int printKDistantFromNode(TreeNode root, int target, int k)
	{
		if(root == null)
			return -1;
		if(root.data == target)
		{
			printKDistant(root, k);
			return 0;
		}
		int leftDist = printKDistantFromNode(root.left, target, k);
		if(leftDist != -1)
		{
			if(leftDist + 1 == k)
				System.out.println(root.data);
			else
				printKDistant(root.right, k - leftDist - 2);
			return leftDist + 1;
		}
		int rightDist = printKDistantFromNode(root.right, target, k);
		if(rightDist != -1)
		{
			if(rightDist + 1 == k)
				System.out.println(root.data);
			else
				printKDistant(root.left, k - rightDist - 2);
			return rightDist + 1;
		}
		return -1;
	}
	public void binaryToDoubly3(TreeNode root)
	{
		fixPrevPointer(root);
		TreeNode head = fixNextPointer(root);
		TreeNode temp = head;
		while(temp!= null)
		{
			System.out.println(temp.data);
			temp = temp.right;
		}
	}
	TreeNode prev31 = null;
	public void fixPrevPointer(TreeNode root)
	{
		if(root == null)
			return;
		fixPrevPointer(root.left);
		root.left = prev31;
		prev31 = root;
		fixPrevPointer(root.right);
	}
	TreeNode prev32 = null;
	public TreeNode fixNextPointer(TreeNode root)
	{
		while(root.right != null)
			root = root.right;
		while(root.left != null)
		{
			prev32 = root;
			root = root.left;
			root.right = prev32;
		}
		return root;
	}
	public void binaryToDoubly2(TreeNode root)
	{
		if(root == null)
			return;
		TreeNode treeRoot = binaryToDoublyUtil2(root);
		while(treeRoot.left != null)
			treeRoot = treeRoot.left;
		TreeNode head = treeRoot;
		TreeNode temp = head;
		while(temp!= null)
		{
			System.out.println(temp.data);
			temp = temp.right;
		}
	}
	public TreeNode binaryToDoublyUtil2(TreeNode root)
	{
		if(root == null)
			return null;
		if(root.left != null)
		{
			TreeNode leftTree = binaryToDoublyUtil2(root.left);
			for(; leftTree.right != null; leftTree = leftTree.right);
			leftTree.right = root;
			root.left = leftTree;
		}
		if(root.right != null)
		{
			TreeNode rightTree = binaryToDoublyUtil2(root.right);
			for(; rightTree.left != null; rightTree = rightTree.left);
			rightTree.left = root;
			root.right = rightTree;
		}
		return root;
	}
	
	/*For binary tree to doubly - method 1*/
	TreeNode prev1 = null;
	TreeNode head1 = null;
	
	public void binaryToDoubly1(TreeNode root)
	{
		binaryToDoublyUtil1(root);
		TreeNode temp = head1;
		while(temp!= null)
		{
			System.out.println(temp.data);
			temp = temp.right;
		}
	}	
	public void binaryToDoublyUtil1(TreeNode root)
	{
		if(root == null)
			return;	
		binaryToDoublyUtil1(root.left);
		if(prev1 == null)
			head1 = root;
		else
		{
			root.left = prev1;
			prev1.right = root;
		}
		prev1 = root;
		binaryToDoublyUtil1(root.right);
	}
	
	public TreeNode inorderLevelToBinary(int[] in, int[] level)
	{
		return inorderLevelToBinaryUtil(in, level, 0, in.length-1, level.length);
	}
	public TreeNode inorderLevelToBinaryUtil(int[] in, int[] level, int inStart, int inEnd, int n)
	{
		if(inStart > inEnd)
			return null;
		TreeNode root = new TreeNode(level[0]);
		if(inStart == inEnd)
			return root;
		int rootIndex = search(in, root.data, inStart, inEnd);
		int[] leftLevel = extractLevel(in, level, inStart, rootIndex, n);
		int[] rightLevel = extractLevel(in, level, rootIndex+1, n-rootIndex-1, n);
		root.left = inorderLevelToBinaryUtil(in, leftLevel, inStart, rootIndex-1, n);
		root.right = inorderLevelToBinaryUtil(in, rightLevel, rootIndex+1, inEnd, n);
		return root;
	}
	public int[] extractLevel(int[] in, int[] level, int start, int newSize, int n)
	{
		int[] newLevel = new int[newSize+2];  //works only with newSize+2
		int j = 0;
		for(int i=0; i<n; i++)
		{
			if(search(in, level[i], start, start+newSize-1) != -1)
			{
				newLevel[j] = level[i];
				if(j >= newSize-1)
					break;
				j++;
			}
		}
		return newLevel;
	}
	
	/* Given inorder traversal of a special binary tree where every node is greater than the left and right keys */
	public TreeNode inorderToBinary(TreeNode root, int[] in)
	{
		return inorderToBinaryUtil(in, 0, in.length-1);
	}
	public TreeNode inorderToBinaryUtil(int[] in, int inStart, int inEnd)
	{
		if(inStart > inEnd)
			return null;
		int maxIndex = findMax(in, inStart, inEnd);
		TreeNode root = new TreeNode(in[maxIndex]);
		if(inStart == inEnd)
			return root;
		root.left = inorderToBinaryUtil(in, inStart, maxIndex - 1);
		root.right = inorderToBinaryUtil(in, maxIndex + 1, inEnd);
		return root;
	}
	public int findMax(int[] in, int start, int end)
	{
		int maxIndex = start, maxElement = in[start];
		for(int i=start; i<end; i++)
		{
			if(in[i] > maxElement){
				maxElement = in[i];
				maxIndex = i;
			}
		}
		return maxIndex;
	}
	public int sumAllrootToLeafPaths(TreeNode root)
	{
		return sumAllRootToLeafPathsUtil(root, 0);
	}
	public int sumAllRootToLeafPathsUtil(TreeNode root, int sum)
	{
		if(root == null)
			return 0;
		sum += root.data;      /* sum = (sum * 10) + root.data; if you want to take root to leaf keys as digits in a num and add all numbers(root to leaf paths)*/
		if(root.left == null && root.right == null)
			return sum;
		return sumAllRootToLeafPathsUtil(root.left, sum) + sumAllRootToLeafPathsUtil(root.right, sum);
	}
	
	/* For constructing binary tree from inorder and preorder traversals */
	int preIndex_IPreB = 0;
	public TreeNode inorderPreorderToBinary(int[] in, int[] pre)
	{
		return inorderPreorderToBinaryUtil(in, pre, 0, in.length-1, in.length);
	}
	public TreeNode inorderPreorderToBinaryUtil(int[] in, int[] pre, int inStart, int inEnd, int size)
	{
		if(inStart > inEnd)
			return null;
		TreeNode root = new TreeNode(pre[preIndex_IPreB]);
		if(preIndex_IPreB <= size)
			preIndex_IPreB++;
		if(inStart == inEnd)
			return root;
		int rootIndex = search(in, root.data, inStart, inEnd);
		root.left = inorderPreorderToBinaryUtil(in, pre, inStart, rootIndex - 1, size);
		root.right = inorderPreorderToBinaryUtil(in, pre, rootIndex + 1, inEnd, size);
		return root;
	}
	public int search(int[] in, int data, int start, int end)
	{
		int index = -1;
		for(int i=start; i<=end; i++)
		{		
			//System.out.println("Value of i in search:"+i+ " start:"+start+" end: "+end);
			if(in[i] == data){
				index = i;
				break;
			}
		}
	  return index;
	}
	public int sumTree(TreeNode root)
	{
		if(root == null)
			return 0;
		int temp = root.data;
		root.data = sumTree(root.left) + sumTree(root.right);
		return root.data + temp;
	}
	public boolean isSubtree(TreeNode root1, TreeNode root2)
	{
		if(root2 == null)
			return true;
		if(root1 == null)
			return false;
		if(isIdentical(root1, root2))
			return true;
		return isSubtree(root1.left, root2) || isSubtree(root1.right, root2);
	}
	public boolean printAncestors(TreeNode root, int data)
	{
		if(root == null)
			return false;
		if(root.data == data)
			return true;
		if(printAncestors(root.left, data) || printAncestors(root.right, data))
		{
			System.out.println(root.data);
			return true;
		}
			return false;
	}
	public int getLevelOfNode(TreeNode root, int data)
	{
		return getLevelOfNodeUtil(root, data, 1);
	}
	public int getLevelOfNodeUtil(TreeNode root, int data, int level)
	{
		if(root == null)
			return 0;
		if(root.data == data)
			return level;
		int ans = getLevelOfNodeUtil(root.left, data, level+1);   /* cannot do || for int */
		if(ans != 0)             /* ans will be 0 if node is not present in the tree */
			return ans;
		ans = getLevelOfNodeUtil(root.right, data, level+1);
		return ans;
	}
	public void printKDistant(TreeNode root, int k)
	{
		if(root == null)
			return;
		if(k == 0){
			System.out.println(root.data);
		    return;
		}
		printKDistant(root.left, k-1);
		printKDistant(root.right, k-1);
	}
	public boolean isFoldable(TreeNode root)
	{
		if(root == null)
			return true;
		mirror(root.left);
		boolean ans = isStructSame(root.left, root.right);
		mirror(root.left);
		return ans;
	}
	public boolean isStructSame(TreeNode node1, TreeNode node2)
	{
		if(node1 == null && node2 == null)
			return true;
		else if((node1 !=null && node2 != null) && isStructSame(node1.left, node2.left) && isStructSame(node1.right, node2.right))
			return true;
		else
			return false;
	}
	public int MaxWidth(TreeNode root)
	{
		if(root == null)
			return 0;
		int height = root.height(root);
		int[] count = new int[height];
		int maxWidth = 0;
		getLevelCountArrayWithPreorder(root, count, 0);
		for(int i=0; i<height; i++)
			if(maxWidth < count[i])
				maxWidth = count[i];
		return maxWidth;
	}
	public void getLevelCountArrayWithPreorder(TreeNode root, int[] count, int level)
	{
		if(root == null)
			return;
		count[level]++;
		getLevelCountArrayWithPreorder(root.left, count, level+1);
		getLevelCountArrayWithPreorder(root.right, count, level+1);
	}
	public int maxWidth(TreeNode root)
	{
		if(root == null)
			return 0;
		int maxWidth = 0, width;
		for(int i=1; i<=root.height(root); i++)
		{
			width = getWidth(root, i);
			if(maxWidth < width)
				maxWidth = width;
		}
		return maxWidth;
	}
	public int getWidth(TreeNode root, int level)
	{
		if(root != null){
		if(level == 1)
			return 1;
		else if(level > 1)
			return getWidth(root.left, level-1) + getWidth(root.right, level-1);
		}
		return 0;
	}
	public void doubleTree(TreeNode root)
	{
		if(root == null)
			return;
		doubleTree(root.left);
		doubleTree(root.right);
		TreeNode temp = root.left;
		root.left = new TreeNode(root.data);
		root.left.left = temp;
	}
	public boolean hasPathSum(TreeNode root, int sum)
	{
		if(root == null)
			return (sum == 0);
		int subsum = sum - root.data;
		if(subsum == 0 && root.left == null && root.right == null)
			return true;
		boolean ans = false;
		if(root.left != null)
			ans = ans || hasPathSum(root.left, subsum);
		if(root.right != null)
			ans = ans || hasPathSum(root.right, subsum);
		return ans;
	}
	public boolean isBalanced(TreeNode root)
	{
		if(root == null)
			return true;
		int leftHeight = height(root.left);
		int rightHeight = height(root.right);
		if((Math.abs(leftHeight - rightHeight) <= 1) && isBalanced(root.left) && isBalanced(root.right))
			return true;
		else
			return false;
	}
	public int diameter(TreeNode root)
	{
		if(root == null)
			return 0;
		int leftHeight = height(root.left);
		int rightHeight = height(root.right);
		int leftDiameter = diameter(root.left);
		int rightDiameter = diameter(root.right);
		return Math.max((leftHeight + rightHeight + 1), Math.max(leftDiameter, rightDiameter));
	}
	public int Diameter(TreeNode root)
	{
		return DiameterUtil(root,0);
	}
	public int DiameterUtil(TreeNode root, int height)
	{
		if(root == null){
			height = 0;
			return 0;
		}
		int leftHeight = 0, rightHeight = 0;
		int leftDiameter = DiameterUtil(root.left, leftHeight);
		int rightDiameter = DiameterUtil(root.right, rightHeight);
		height = Math.max(leftHeight, rightHeight) + 1;
		return Math.max((leftHeight + rightHeight + 1), Math.max(leftDiameter, rightDiameter));
	}
	public void convertToSumProperty(TreeNode root)
	{
		int leftData = 0, rightData = 0, diff;
		if((root == null) || root.left == null && root.right == null)
			return;
		else{
			convertToSumProperty(root.left);
			convertToSumProperty(root.right);
			if(root.left != null)
				leftData = root.left.data;
			if(root.right != null)
				rightData = root.right.data;
			diff = (leftData + rightData) - root.data;
			if(diff > 0)
				root.data += diff;
			if(diff < 0)
				updateChild(root, -diff);
		}
	}
	public void updateChild(TreeNode root, int diff)
	{
		if(root.left != null){
			root.left.data += diff;
			updateChild(root.left, diff);
		}
		else if(root.right != null){
			root.right.data += diff;
			updateChild(root.right, diff);
		}
	}
	public boolean checkSumProperty(TreeNode root)
	{
		int leftSum = 0, rightSum = 0; 		
		if(root == null || (root.left == null && root.right == null))
			return true;
		if(root.left != null)
			leftSum = root.left.data;
		if(root.right != null)
			rightSum = root.right.data;
		return (root.data == leftSum + rightSum) && checkSumProperty(root.left) && checkSumProperty(root.right);		
	}
	public int countLeaf(TreeNode root)
	{
		if(root == null)
			return 0;
		if(root.left == null && root.right == null)
			return 1;
		return countLeaf(root.left) + countLeaf(root.right);
	}
	public void printRootToLeaf(TreeNode root)
	{
		ArrayList path = new ArrayList();
		printRootToLeafUtil(root, path, 0);
	}
	public void printRootToLeafUtil(TreeNode root, ArrayList path, int pathlen)
	{
		if(root == null)
			return;
		path.add(pathlen, root.data);
		pathlen++;
		if(root.left == null && root.right == null)
		{
			printPath(path, pathlen);
			System.out.println();
		}
		printRootToLeafUtil(root.left, path, pathlen);
		printRootToLeafUtil(root.right, path, pathlen);
	}
	public void printPath(ArrayList path, int pathlen)
	{
		for(int i=0; i<pathlen; i++)
			System.out.print(" "+path.get(i));
	}
	public void mirror(TreeNode root)
	{
		if(root == null)
			return;
		mirror(root.left);
		mirror(root.right);
		TreeNode temp = root.left;
		root.left = root.right;
		root.right = temp;
	}
	public int height(TreeNode root)
	{
		if(root == null)
			return 0;
		return Math.max(height(root.left), height(root.right)) + 1;
	}
   public boolean isIdentical(TreeNode node1, TreeNode node2)
   {
	  if(node1 == null && node2 == null)
		 return true;
	  if(node1 != null && node2 != null)
		 return (node1.data == node2.data && isIdentical(node1.left, node2.left) && isIdentical(node1.right, node2.right));
	  return false;
   }
	public int size(TreeNode root)
	{
		if(root == null)
			return 0;
		return size(root.left) + 1 + size(root.right);
	}
	public TreeNode(int data)
	{
		this.data = data;
		left = null;
		right = null;
	}
	public TreeNode()
	{
		left = null;
		right = null;
	}	
	@Override
	public String toString()
	{
		return " " + this.data;
	}
}
public class HelloWorld{
public static void main(String args[])
{
	TreeNode root = new TreeNode(10);
	TreeNode node1 = new TreeNode(5);
	TreeNode node2 = new TreeNode(15);
	TreeNode node3 = new TreeNode(3);
	TreeNode node4 = new TreeNode(1);
	root.left = node1;
	root.right = node2;
	node1.left = node3;
	node1.right = node4;
	int[] inorder = new int[]{3,5,1,10,15};
	int[] preorder = new int[]{10,5,3,1,15};
	char[] preorderLN = new char[]{'N','N','L','L','L'};
	int[] levelorder = new int[]{10,5,15,3,1};
	root.spiralTraversalUsingBool(root);
	/*System.out.println(temp);
	System.out.println(temp.left);
	System.out.println(temp.right);
	System.out.println(temp.left.left);
	System.out.println(temp.left.right); */
}
}
